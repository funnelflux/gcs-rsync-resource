#!/usr/bin/env bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PLATFORM=`uname`
MD5_TOOL="md5sum"
if [ $PLATFORM = "Darwin" ]; then
  MD5_TOOL="md5"
fi

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

cd $source

payload=$(mktemp $TMPDIR/gcs-rsync-resource-request.XXXXXX)

cat > $payload <&0

bucket=$(jq -r '.source.bucket // ""' < $payload)
remote_path=$(jq -r '.source.remote_path // ""' < $payload)
json_key=$(jq -r '.source.json_key // ""' < $payload)
base_dir=$(jq -r '.params.base_dir // ""' < $payload)
dry_run=$(jq -r '.params.dry_run // ""' < $payload)

if [ -z "${bucket}" ]; then
  echo "invalid payload (missing bucket)"
  exit 1
fi

if [ -z "${remote_path}" ]; then
  echo "invalid payload (missing remote_path)"
  exit 1
fi

if [ -z "$json_key" ]; then
  echo "invalid payload (missing json_key)"
  exit 1
fi

if [ -f "${json_key}" ]; then
  cp "${json_key}" "$TMPDIR/google_service_account.json"
else
  echo "${json_key}" > "$TMPDIR/google_service_account.json"
fi
json_key_file="$TMPDIR/google_service_account.json"

if [ -z "${base_dir}" ] || [ ! -d "${base_dir}" ]; then
  echo "invalid payload (missing base_dir)"
  exit 1
fi

if [ $dry_run ]; then
  dry_run="-n"
fi

gcloud auth activate-service-account --key-file="${json_key_file}" --no-user-output-enabled

pushd "${base_dir}"
  gsutil -m rsync -d -r -n . "gs://${bucket}/${remote_path}" &> $TMPDIR/metadata
  metadata=$(cat $TMPDIR/metadata \
    | grep -v "$(cat $TMPDIR/metadata | head -n 2)" \
    | awk '{print $2,$3,$4,$5,$6}' \
    | jq -R -s '
      try (
        split("\n")[:-1] |
        [
          to_entries[] |
               (select(.value | test("copy")) .value | split(" ") | {operation: .[0], source: .[1], destination: .[3]})
            // (select(.value | test("remove")) .value | split(" ") | {operation: .[0], file: .[1]})
            // (select(.value | test("mtime")) .value | split(" ") | {operation: (.[0] + " " + .[1]), file: .[3]})
            // (select(.value | test("POSIX")) .value | split(" ") | {operation: (.[0] + " " + .[1]), file: .[4]})
        ] |
        group_by(.operation) | .[] |
        map({name: .operation, value: .}) |
        del(.[].value.operation) | .[]
      ) catch empty' \
    | jq -s '. | group_by(.name) | map({"name": .[].name, "value": map(.value) | tostring}) | unique')

  gsutil -m rsync -d -r ${dry_run} . "gs://${bucket}/${remote_path}"
popd

echo "{ \"version\": { \"ref\": \"$(gsutil ls -la "gs://${bucket}/${remote_path}/**" | $MD5_TOOL | cut -d ' ' -f 1)\"}, \"metadata\": "$metadata" }" >&3
