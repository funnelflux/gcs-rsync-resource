#!/usr/bin/env bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PLATFORM=`uname`
MD5_TOOL="md5sum"
if [ $PLATFORM = "Darwin" ]; then
  MD5_TOOL="md5"
fi

payload=$(mktemp $TMPDIR/gcs-rsync-resource-request.XXXXXX)

cat > $payload <&0

bucket=$(jq -r '.source.bucket // ""' < $payload)
if [ -z "$bucket" ]; then
  echo "invalid payload (missing bucket)"
  exit 1
fi

remote_path=$(jq -r '.source.remote_path // ""' < $payload)
if [ -z "$remote_path" ]; then
  echo "invalid payload (missing remote_path)"
  exit 1
fi

json_key=$(jq -r '.source.json_key // ""' < $payload)
if [ -z "$json_key" ]; then
  echo "invalid payload (missing json_key)"
  exit 1
fi
if [ -f "${json_key}" ]; then
  cp "${json_key}" "$TMPDIR/google_service_account.json"
else
  echo "${json_key}" > "$TMPDIR/google_service_account.json"
fi
json_key="$TMPDIR/google_service_account.json"

gcloud auth activate-service-account --key-file="${json_key}" --no-user-output-enabled

gsutil ls "gs://${bucket}/${remote_path}/**" 1>&2

for file in $(gsutil ls "gs://${bucket}/${remote_path}/**")
do
  echo $file "$(gsutil hash "$file" | grep md5 | awk '{print $3}')" &>> $TMPDIR/metadata
done

version=$(cat $TMPDIR/metadata | $MD5_TOOL | cut -d ' ' -f 1)

echo "{ \"ref\": \"$version)\"}" | jq --slurp . >&3
